#!/usr/bin/env node

var sys = require('util');

try {
    require(process.cwd() + '/server');
} catch (e) {
    console.log(e);
    require('../lib/onwarlock').initSystem();
}

var tools = warlock.tools;
var utils = warlock.utils;
var addSpaces = utils.addSpaces;
var generators = warlock.generators;

global.args = process.argv.slice(2);

var exitAfterAction = true;

var command = args.shift();

switch (command) {
    default:
    case 'h':
    case 'help':
        if (command && command !== 'help' && command !== 'h') {
            var found = false;
            Object.keys(warlock.tools).forEach(function (cmd) {
                var c = warlock.tools[cmd];
                if (cmd === command || (c && c.help && c.help.shortcut === command)) {
                    exitAfterAction = c();
                    found = true;
                }
            });

            if (found) {
                break;
            }
        }
        var help = [
            'Usage: warlock command [argument(s)]\n',
            'Commands:'
        ];
        var commands = [
            ['h', 'help',            'Display usage information'],
            ['i', 'init',            'Initialize warlock app'],
            ['g', 'generate [smth]', 'Generate something awesome']
        ];
        Object.keys(warlock.tools).forEach(function (cmd) {
            var h = warlock.tools[cmd].help;
            if (h && h.usage) {
                commands.push([h.shortcut || '', h.usage, h.description]);
            }
        });
        var maxLen = 0;
        commands.forEach(function (cmd) {
            if (cmd[1].length > maxLen) {
                maxLen = cmd[1].length;
            }
        });
        commands.forEach(function (cmd) {
            help.push('  ' + addSpaces(cmd[0] + ',', 4) + addSpaces(cmd[1], maxLen + 1) + cmd[2]);
        });
        help.push('\nAvailable generators:\n');
        help.push('  ' + warlock.generators.list());
        sys.puts(help.join('\n'));
        break;

    case 'i':
    case 'init':
        exitAfterAction = false;
        generators.perform('init');
        break;

    case 'g':
    case 'generate':
        var what = args.shift();
        if (typeof what == "undefined" || what == null) {
            console.log('Generator not specified, available generators: ', generators.list());
        } else {
            if (generators.exists(what)) {
                generators.perform(what, args);
            } else {
                console.log('Generator "' + what + '" not found, available generators: ', generators.list());
            }
        }
        break;

    case '--version':
        console.log(warlock.version);
        break;

    case 'd':
    case 'demo':
        exitAfterAction = false;
        var demourl = args.shift();
        if(demourl){
            generators.perform('demo',process.cwd());
        }
        break;
}


if (exitAfterAction) {
    process.exit(0);
}

